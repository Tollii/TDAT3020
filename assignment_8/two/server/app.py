from flask import Flask, request, jsonify, Response
import hashlib
import os
import functools
import binascii
from flask_cors import CORS

app = Flask(__name__)
CORS(app)

tokens = []

users = {
    'test_user': {
        'salt': 'salt',
        'hash': 'hash'
    }
}


def requires_auth(f):
    @functools.wraps(f)
    def wrapper_auth(*args, **kwargs):
        try:
            token = request.headers['Authorization']

            if token in tokens:
                print('Token OK')
                f()
                return Response('Authorized', status=200)

            else:
                print('Token NOT OK')
                return Response('Authorized', status=401)

        except KeyError as ke:
            print('Unauthorized user')
            return Response('Not authorized', status=401)

    return wrapper_auth


@app.route('/hello')
@requires_auth
def hello_world2():
    return 'Hello World again!'


@app.route('/')
def hello_world():
    return 'Hello World!'


@app.route('/register', methods=['POST'])
def register():
    print('Registering user...')
    username = request.json['username']
    password = request.json['password']
    server_salt = os.urandom(16)  # Random generated bytes from OS
    server_hash = hashlib.pbkdf2_hmac('sha256', bytes(password, 'utf-8'), server_salt, 5000).hex()
    print(server_hash)

    users[username] = {
        'salt': server_salt.hex(),
        'hash': server_hash
    }
    print(users)
    return 'Registered'


@app.route('/auth', methods=['POST'])
def auth():

    try:
        user = users[request.json['username']]
        client_hash = request.json['password']

        server_hash = hashlib.pbkdf2_hmac('sha256', bytes(client_hash, 'utf-8'), bytes.fromhex(user['salt']), 5000).hex()
        if user and  server_hash == user['hash']:
            print('User is authenticated!')
            token = binascii.b2a_hex(os.urandom(15))
            tokens.append('Bearer ' + token.hex())

            header = {
                'Authorization': 'Bearer ' + token.hex()
            }

            return Response('wow', headers=header, status=200)

    except KeyError as ke:
        print('Error authenticating user')

    return 'wasd'


if __name__ == '__main__':
    app.run(debug=True)
